/* Hierarchical Inheritance*/
#include<iostream>
using namespace std;
class Parent{
    public : Parent(){
        cout<<"\n Parent Class Constructor";
    }
    public : ~Parent(){
        cout<<"\n Parent class Destructor";
    }
    public : void Fun1(){
        cout<<"\n Parent class Function";
    }
};
class Child1 : public Parent{
    public : Child1(){
        cout<<"\n Child1 Class Constructor";
    }
    public : ~Child1(){
        cout<<"\n Child class Destructor";
    }
    public : void Fun2(){
        cout<<"\n Child1 class Function";
    }
};
class Child2 : public Parent {
    public : Child2(){
        cout<<"\n Child2 Class Constructor";
    }
    public : ~Child2(){
        cout<<"\n Child2 class Destructor";
    }
    public : void Fun3(){
        cout<<"\n Child2 class Function" ; 
    }
};
class Child3 : public Parent{
    public : Child3(){
        cout<<"\n Child3 Class Constructor";
    }
    public : ~Child3(){
        cout<<"\n Child3 class Destructor";
    }
    public : void Fun4(){
        cout<<"\n Child3 class Function";
    } 
};
int main(){
    Child1 obj1;
    obj1.Fun1();
    obj1.Fun2();
    Child2 obj2;
    obj2.Fun1();
    obj2.Fun3();
    Child3 obj3;
    obj3.Fun1();
    obj3.Fun4();
}

